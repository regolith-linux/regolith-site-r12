[{"body":"Based on your preferred installation method, follow one of the following two sections to install Regolith:\nOption 1: Ubuntu Installer  Download the ISO image and then use an OS installation tool such as USB Creator to write the downloaded file into a USB device. Here are Ubuntu guides for performing this action in Windows, Mac, and Ubuntu. Reboot the computer and select the USB flash drive to boot from. Install or run the live environment by providing information when prompted during the setup process. See this tutorial to learn more about the installation process. When prompted, reboot the computer and login to your new system.  Option 2: PPA  Add the PPA to your system:   $ sudo add-apt-repository ppa:regolith-linux/release  Install the Regolith desktop package:   $ sudo apt install regolith-desktop  Reboot the computer, and when logging in select the \u0026ldquo;Regolith\u0026rdquo; session in the gear menu (⚙️).  ","excerpt":"Based on your preferred installation method, follow one of the following two sections to install …","ref":"https://kgilmer.github.io/r13-dev-site/docs/getting-started/install/","title":"Installation"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/docs/reference/keybindings/","title":"Keybindings"},{"body":"Looks provided by Regolith have the package prefix regolith-look-. For example, another look sporting the Solarized color palette and a different GTK theme and icon set is called regolith-look-solarized-dark.\nFinding Looks All look packages using this naming scheme can be found via the following command:\n$ apt list | grep regolith-look Installing a Look Looks can be installed via the apt tool or with any tool that can install Debian packages on the system, such as synaptic. For example, this command will install the Ubuntu look:\n$ sudo apt install regolith-look-ubuntu If you pay attention to the output of apt you may notice that in addition to installing the look, fonts-font-awesome will also be installed. As a feature, looks are able to depend on any resources or artifacts they require as packages. This ensures that once a look is installed, the user does not need to care about what other things that look make require to function properly. It's taken care of by the package manager.\nSwitching to a Look Once a look has been installed, a utility command called regolith-look can be used to enable it. To enable the ubuntu look installed in the previous step, try the following:\n$ regolith-look set ubuntu $ regolith-look refresh The command will mention that it created a file in your user directory. This file is an Xresource file, and it's stored in a specific path such that i3-gnome-flashback will look for it upon session start. Let's have a look at the file:\n$ cat ~/.Xresources-regolith #include \u0026#34;/etc/regolith/styles/ubuntu/root\u0026#34; In essence, our Xresource file is simply pointing to another Xresource file. Lets look there:\n$ cat /etc/regolith/styles/ubuntu/root ! -- Styles - Colors #include \u0026#34;/etc/regolith/styles/ubuntu/color\u0026#34; ! -- Styles - Fonts #include \u0026#34;/etc/regolith/styles/ubuntu/typeface\u0026#34; ! -- Styles - Theme #include \u0026#34;/etc/regolith/styles/ubuntu/theme\u0026#34; ! -- Applications ! These files map values defined above into specific app settings. #include \u0026#34;/etc/regolith/styles/st-term\u0026#34; #include \u0026#34;/etc/regolith/styles/i3-wm\u0026#34; #include \u0026#34;/etc/regolith/styles/i3xrocks\u0026#34; #include \u0026#34;/etc/regolith/styles/rofi\u0026#34; #include \u0026#34;/etc/regolith/styles/gnome\u0026#34; Here we can see that there are separate Xresource files that define color, typeface and theme (icon, GTK), and these are loaded and then applied to the UI components integrated by Regolith: st (terminal), i3-wm, i3xrocks, rofi, and GNOME.\nRefreshing a Look There may be times that the UI of the system and the Regolith look get out of sync. For example, if a program sets the wallpaper or icon theme externally, this will not be reflected in the Xresource settings. Regolith will only update itself upon login if it detects of Xresource changes have been made. If you wish to force Regolith to reload the UI based on the Xresource settings, run:\n$ regolith-look refresh Learning More To dig deeper, read about Styles in the following page and have a look at the regolith-styles README.\n","excerpt":"Looks provided by Regolith have the package prefix regolith-look-. For example, another look …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/look/","title":"Look"},{"body":"As mentioned in the Getting Started section, super space causes i3 to execute Rofi to present a list of apps. Once launched, the application selected will open a window on the currently active workspace. If other windows are already present on this workspace, they will be resized to allow the new window to also be placed without overlapping or otherwise obstructing the existing windows.\nWindow Layout super backspace can be used to toggle between horizontal and vertical layout modes, which will apply to the next launched application. In this way, windows in a workspace can divide the screen into portions relative to the desired importance of the user.\nIn addition to toggling layout orientation, existing windows can be moved relative to their neighbors with super shift ↑ ↓ ← → (arrow keys) or VIM-style arrow keys k j h l. Or, super tab and super shift tab can be used to move back and forth between active workspaces.\nWindows can also be directly moved to other workspaces. The bar will indicate all active workspaces as well as the currently focused workspace. super shift [0-9] will cause the currently focused window to be moved to the workspace number selected.\nUsers can navigate to windows via super [0-9] but can also directly navigate to a specific window with super ctrl space.\nQuit an Application. Unfortunately in Linux there is no convention that all applications follow for how to quit. In traditional desktop environments, users often rely on the close box of the window or a global menu system. Because Regolith has a reduced UI, depending on the application these common mouse-driven ways of exiting apps may not be available. Depending on the app, one of the following keybindings may cause it to exit:\n ctrl w ctrl W ctrl q ctrl Q ctrl d alt F4  If none of these commands work, it may be that the application has crashed and is not responding to requests from the window manager. In this case you can kill the focused application with super shift q\n","excerpt":"As mentioned in the Getting Started section, super space causes i3 to execute Rofi to present a list …","ref":"https://kgilmer.github.io/r13-dev-site/docs/interface/apps/","title":"Working with Applications"},{"body":"Regolith is a collection of open source components that together form a desktop environment. Almost all of the UI components that are used to build Regolith are independent open source projects that have simply been configured for a specific workflow and visual aesthetic. Most computer desktop environments are optimized for ease-of-use and familiarity with commercial operating systems such as Microsoft Windows or Apple's OS X. In contrast, Regolith provides a way of interacting with a computer that is optimized for user productivity.\nThe Keyboard, the Mouse, and the Monitor Regolith places emphasis on the keyboard input device over the mouse, in relation to most other desktop environments. This is for one reason: productivity. But this benefit comes with a one-time cost: learning the keybindings. In exchange for this up-front cost, the user is subsequently able to perform general computer actions faster and with less foreground thought. Additionally, by pushing more of the computer actions into the user's memory, more of the computer's visual interface can be devoted to the user's applications. Put another way, the Regolith interface devotes more bandwidth to the user's application and less to the general management of the computer. And because ultimately the productive output of the user is a result of interaction with applications, the general productivity of the user is enhanced. This is a subjective benefit, and may be more or less important to the user.\nTiling Windows Perhaps the most user-impacting component in Regolith is the window manager, an open source project called i3-gaps (which is a customization of i3-wm). This program organizes windows into tiles. By default, i3-gaps strives to fill the entire screen with tiles. If only one program is presenting a window, then that window occupies the entire screen. For two windows, both get an equal portion of the screen, and so on. By using keybindings, the user can tell i3-gaps to resize, move, and otherwise organize windows in other ways. A key advantage to this approach is that the user is freed from micro managing window layouts (at the cost of having to learn the keybindings).\nLaunching Applications It is common for desktop environments to display application launchers throughout the user interface, in the form of icons and text. Folders, docks, and context menus are used to present a form of menu to the user. Despite them appearing visually different, they are have one function: to launch an application. As with keybindings, in Regolith this user interface of launching apps is refined and minimized. Desktop icons, panels, and docks are not used. Rather, the user invokes the application launcher which presents a menu of applications sorted by frequency of usage. The user may begin typing the name or function of the application they intend to load and the list is filtered accordingly. In addition, frequently used applications such as terminal and browser have specific keybindings. With this UI treatment, there is no fixed overhead on the display for the presentation of application launchers. This provides the user benefit of more screen space devoted to the user's applications.\nSystem Management Modern computers are complex machines with many observable attributes. For the day-to-day operation however, most of these can be ignored. Each user has a specific subset of system state they care about, and so there is no one perfect configuration for every user. By default Regolith provides on-screen state information on the bar for the user's workspaces, keybindings help, network and CPU utilization, notifications, and the system time. More or less items can be configured by the user as needed.\nIn addition to the transient system information provided on the bar, the system configuration can be changed by the user via the Settings application. This configuration system is part of GNOME, and provides a rich set of UI pages to configure WiFi networks, Bluetooth devices, displays, and other devices.\nWhere should I go next?  Getting Started: Get started with Regolith The Interface: Understand how to perform actions in Regolith Keybindings: Learn the keybindings  ","excerpt":"Regolith is a collection of open source components that together form a desktop environment. Almost …","ref":"https://kgilmer.github.io/r13-dev-site/docs/overview/","title":"Overview"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/docs/policy-and-process/privacy/","title":"Privacy"},{"body":"While we'll cover everything in greater detail in other areas of the documentation, this page covers the very basic users need to know in order to use Regolith.\nThe Super Key Most keybindings you'll be using with Regolith start with the super key. This key typically says \u0026ldquo;WIN\u0026rdquo; or has a MS Windows logo on it. On a Mac it is the Command ⌘ key. Going forward, this key will simply be referred to as super but keep in mind that you can change which physical button super maps to in your configuration if you choose to.\nLaunch an Application After logging in, you'll be at a blank screen with the bar at the bottom and some keyboard shortcuts on the right. To launch an application, press super space and a menu will be presented with all of the applications installed on the system. If you begin typing the name of the application you wish to launch, the list will filter down to only matching names. You can also scroll through the list with the arrow keys.\nTerminal The terminal is a special application that has it's own keybinding, super enter.\nBrowser The preferred browser is also special, and can be launched with super shift enter.\nQuit an Application. Unfortunately in Linux there is no convention that all applications follow for how to quit. In traditional desktop environments, users often rely on the close box of the window or a global menu system. Because Regolith has a reduced UI, depending on the application these common mouse-driven ways of exiting apps may not be available. Depending on the app, one of the following keybindings may cause it to exit:\n ctrl w ctrl W ctrl q ctrl Q ctrl d alt F4  If none of these commands work, it may be that the application has crashed and is not responding to requests from the window manager. In this case you can kill the focused application with super shift q\nSwitching Workspaces A primary way of managing how applications occupy the screen is by the usage of workspaces. A workspace is in essence a group of zero or more applications that all present windows on the same physical display. Users can switch workspaces to \u0026ldquo;gain\u0026rdquo; more space for applications to occupy. Windows can be moved across workspaces. Workspaces can be tied to physical display or be moved to other displays as needed. To switch workspaces, hold down the super key and press one of the number keys. This will navigate to that workspace. If any windows exist in a given workspace, it will show in the bar as being active. Thus, by referring to the bar the user can known of which workspaces active applications live.\nFurther Reading More keybindings are listed in Remontoire, the shortcut application. This app is loaded automatically on the first session, but not on successive logins. The window can be toggled at any time by clicking the circled i icon in the bar, or pressing super shift ?.\n","excerpt":"While we'll cover everything in greater detail in other areas of the documentation, this page covers …","ref":"https://kgilmer.github.io/r13-dev-site/docs/getting-started/basics/","title":"Basics"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/docs/reference/configurations/","title":"Configuration Files"},{"body":"Regolith 1.3 introduces the integration of Rofication into the environment. Previous versions relied on a built-in notification system within gnome-flashback but the UI was distracting. Rofication relies on a notification daemon and Rofi-based front end. A block in the bar shows the number of notifications the user has. When a new notification is received, this number is incremented by one. There is no other alert or other UI that would notify the user of the new message. If a more agressive notification UI is desired, dunst is recommended.\nManaging Notifications Next to the bell icon in the bar is the current number of notifications. To view and delete them, select super n and a menu will load. Notifications can be read and then deleted with delete and the notification window can be dismissed with escape. All low-priority notifications can be deleted at once with shift delete from within the notification menu.\n","excerpt":"Regolith 1.3 introduces the integration of Rofication into the environment. Previous versions relied …","ref":"https://kgilmer.github.io/r13-dev-site/docs/interface/notifications/","title":"Notifications"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/docs/reference/configurations-copy/","title":"Packages"},{"body":"As stated in the repo readme, Regolith styles are a convention by which a set of files which define key/value pairs are loaded into memory and can be queried by xrdb or xrescat. Xresources employes the C preprocessor to allow for complex behaviors such as including more files, defining constants, and conditional expressions. In Regolith, only two preprocessor directives are used: include and define. include statements are used to reference other files. Collections of files called looks were covered in the previous section of this guide. define statements are a little more involved.\nDefines To maximize the re-use of theme information in Regolith, Xresources are divided into two categories of files: definition files and application files. The definition files make heavy use of the define directive. They essentially bind an abstract key, such as \u0026ldquo;blue\u0026rdquo; or \u0026ldquo;terminal font\u0026rdquo; to a literal value, such as #0000FF or Source Code Pro Medium. In making changes to files, it's expected that these defines will change. The user may wish to specify a different icon set, or typeface, and would do so by modifying or creating a new definition file. Once this file is created, it needs to be referenced by a top-level Xresource file in ~/Xresource-regolith.\nApplication Xresource files As mentioned previously, in /etc/regolith/styles lives a number of Xresources, including those for specific applications such as st or i3-wm. Opening these files will show a mapping of the abstract keys provided by the defines files to application specific keys. In this way, the general description of the look can be mapped to any UI component or application that can read from Xresources.\nLoading Order The i3-gnome-flashback session init script will check for an Xresources file in the following order:\n ~/.Xresources-regolith /etc/regolith/styles/root  In addition to a Regolith Xresources file, ~/.Xresources will also be loaded if it exists upon session start.\nReloading Xresources The xrdb command can be used to refresh Xresource values after they have changed. For example, to reload the user Xresource file run:\n$ xrdb -merge ~/.Xresources-regolith Verification You can test that a change has been made to your Xresources file by querying it from the command line. If a change was made to key foo.bar then the following command will return it's current value, or empty if unset:\n$ xrescat foo.bar empty ","excerpt":"As stated in the repo readme, Regolith styles are a convention by which a set of files which define …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/styles/","title":"Styles"},{"body":"This section contains the information necessary to get Regolith running on a computer. There are two primary ways of installing Regolith; via an Ubuntu-based installer and via a Personal Package Archive (PPA). Either of these methods will result in essentially the same user experience, although installing via the Ubuntu installer will result in a package selection that is different from installing vanilla Ubuntu. However by adding and removing specific packages a vanilla Ubuntu system can be configured.\nPrerequisites Ubuntu Installer  A modern computer that can boot from a USB flash drive. Free space on a local drive. The installer will allow for managing existing partitions or installing on an empty volume. An internet connection to install updates during and after installation. A monitor with at least VGA (1024 x 768) resolution. Regolith is optimized for FHD (1920 x 1080) screens. An empty USB flash drive with at least 4 Gb of storage space.  PPA  An existing Ubuntu installation with admin rights, version 18.04 or 19.04. 100Mb of free storage space to install the Regolith desktop environment. An internet connection to install updates during and after installation.  Deciding on Installation Method If you already have an Ubuntu system of a supported version, than adding Regolith via PPA is the faster and less disruptive method. The Ubuntu installer method is better for starting from scratch, installing into a virtual machine, or just ensuring that any existing software is not conflicting with Regolith. Some users have had some issues with getting Regolith to work properly with other Ubuntu derivative desktop environments. Installing a fresh instance can sidestep these potential issues.\n","excerpt":"This section contains the information necessary to get Regolith running on a computer. There are two …","ref":"https://kgilmer.github.io/r13-dev-site/docs/getting-started/","title":"Getting Started"},{"body":" These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files are stored in GitHub. You can use the guidelines \u0026ldquo;as is\u0026rdquo; or adapt them with your own instructions: for example, other deployment options, information about your doc project's file structure, project-specific review guidelines, versioning guidelines, or any other information your users might find useful when updating your site. Kubeflow has a great example.\nDon't forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here's a quick guide to updating the docs. It assumes you're familiar with the GitHub workflow and you're happy to use the automated preview of your doc updates:\n Fork the Regolith Linux repo on GitHub. Make your changes and send a pull request (PR). If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. (Don't add the Hugo property \u0026ldquo;draft = true\u0026rdquo; to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it's ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of \u0026ldquo;Deploy preview ready\u0026rdquo; to see a preview of your updates. Continue updating your doc and pushing your changes until you're happy with the content. When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers.  Updating a single page If you've just spotted something you'd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don't already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You'll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Regolith Linux repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you've found a problem in the docs, but you're not sure how to fix it yourself, please create an issue in the Regolith Linux repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  [Docsy user guide](wherever it goes): All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","excerpt":"These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files …","ref":"https://kgilmer.github.io/r13-dev-site/docs/policy-and-process/contributions/","title":"Policy and Process"},{"body":" Pay special attention to this section if you are experiencing odd visual glitches or slow graphics performance.\n As mentioned previously, a compositor is a UI component that visual effects to windows before they are rendered on-screen. Many desktop environments integrate a compositor directly into the window manager, making it difficult to switch out or disable. In Regolith, the compositor is defined as a pluggable \u0026ldquo;extension point\u0026rdquo; in the packaging system. This means that compositors can be switched out simply by installing the packages that contain them. The underlying packaging system will ensure there are no conflicts and that all the dependencies of a given compositor are also installed.\nFinding Available Compositors The following command will list all compositors configured to work with Regolith:\napt list | grep regolith-compositor- At least the following three compositors should be available:\n   Package Name Backend Description     regolith-compositor-compton-glx Compton The default compositor for Regolith.   regolith-compositor-xcompmgr xcompmgr An early compositor that may offer more consistent performance if compton-glx is promblematic   regolith-compositor-none  A no-op package that does not run a Compositor. Best for absolute UI performance.    Installing a Compositor Run the following package install command to swap out the compositor. In this case we'll run xcompmgr:\n$ apt install regolith-compositor-xcompmgr Log back in and the new compositor should be loaded. You can verify by checking the process list for xcompmgr:\n$ ps aux | grep xcompmgr ","excerpt":"Pay special attention to this section if you are experiencing odd visual glitches or slow graphics …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/compositors/","title":"Compositors"},{"body":"The Regolith UI is composed of the following open source projects, and their respective transitive dependencies:\n Xorg X display server i3-gaps window manager Rofi application launcher i3bar bar i3xrocks bar script scheduler, based on i3blocks Rofication notification system Remontoire shortcut window gdm3 desktop session manager gnome-flashback GNOME session manager  ","excerpt":"The Regolith UI is composed of the following open source projects, and their respective transitive …","ref":"https://kgilmer.github.io/r13-dev-site/docs/interface/","title":"The Interface"},{"body":"GNOME control center (also known as Settings). A key difference between Regolith and other environments described as minimal is the integration of the GNOME settings backend. This provides a well-tested, consistent, and friendly way of configuring your environment and computer. To load the settings app, launch \u0026ldquo;Settings\u0026rdquo; from Rofi or press super c.\nSettings is a special app in Regolith in that it is launched in floating mode. This is because typically when loading settings a user is looking to make a specific change and then exit back to their work. Once loaded use the tab sections on the left of the window to select which item you wish to configure.\ni3-wm The i3 window manager is not part of GNOME and so it's configuration is not viewable or changable from the GNOME control center. Rather, the user must edit the config file and reload i3 to make changes. In Regolith, the i3 config file is at /etc/regolith/i3/config and users can supply their own copy that will override this default if placed at ~/.config/regolith/i3/config.\nMany things about Regolith can be configured in the i3 config file. It is best to read the i3 user guide to understand what and how to modify this file.\ni3bar The i3bar configuration is defined in the i3 config file listed directly above, but the i3bar has it's own configuration for status items. To change which information is displayed in the bar, the default file is /etc/regolith/i3xrocks/config and can be overridden by the user by specifying a new path in the i3 config file, as described above.\nLook The look of Regolith is configured via Xresources, that live in /etc/regolith/styles/. This topic is covered in detail in the Customize section of the documentation.\nSession When Regolith is initially loaded, a script is run that configures the system and launches i3-wm. While it is not recommended to modify this script, it can provide details about how Regolith is structured and what policy it implements when loading configuration. This file is readable at /usr/bin/i3-gnome-flashback. In fact, this script could be considered the initial seed of the Regolith project and was taken from the i3-gnome-flashback project.\n","excerpt":"GNOME control center (also known as Settings). A key difference between Regolith and other …","ref":"https://kgilmer.github.io/r13-dev-site/docs/interface/system/","title":"System Configuration"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/docs/policy-and-process/support/","title":"Support"},{"body":"i3bar The bar's visibility can be toggled with super i. This can be useful when wanting to remove all distractions and devote 100% of the screen to one or more applications in your workspace. Another way of giving one application complete use of the screen is to press super f to cause the active application to enter full screen mode.\ni3-wm Layout Mode i3-wm offers a few different layout modes. super t can be used to toggle between tabbed, horizontal and vertical split modes.\n","excerpt":"i3bar The bar's visibility can be toggled with super i. This can be useful when wanting to remove …","ref":"https://kgilmer.github.io/r13-dev-site/docs/interface/advanced/","title":"Advanced"},{"body":"As previously mentioned, Regolith is a collection of existing open source components that are integrated into a desktop environment. Due to standards regarding the way UI components should communicate and years of integration between components, for the most part is simple to swap out parts of the UI for others.\nThe following table lists each UI component and notes regarding it's mutability:\n   UI Component Alternatives Swappable     Xorg Unknown Unknown   i3-gaps i3-wm, others Difficult but possible   i3bar Polybar, lemonbar, many others. Yes, the i3 config file is changed to load a different bar.   i3xrocks i3blocks, barista, many others. Yes, the i3 config file is changed to load a different status program.   Rofication Dunst, gnome-flashback Yes, the i3 config file is configured to load the Notification backend and Rofi UI, and i3xrocks is configured to load the blocklet.   Remontoire Conky Yes, the i3 config file is changed to load a different help program.   gdm3 lightdm, sddm, xdm, others. This is configured in Ubuntu. Installing an alternative session manager should present a prompt to specify which to use.   gnome-flashback None No    Due to the breadth of the topic, more details are not available here. Experimenting with different UI components is a fun way to learn more about the internals of the operating system. It is recommended to first experiment in a VM running Regolith to avoid breaking your working environment.\n","excerpt":"As previously mentioned, Regolith is a collection of existing open source components that are …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/components/","title":"Components"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90's four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven't heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026amp;B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026amp;B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There's a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a \u0026ldquo;mixed\u0026rdquo; task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin\u0026rsquo; Somethin\u0026rsquo;, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let's Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I'm a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026amp; Stealin, The New Style, She's Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \u0026quot;bar\u0026quot;; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \u0026quot;bar\u0026quot;; bar := \u0026quot;foo\u0026quot;; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \u0026#34;bar\u0026#34;;` lexer := lexers.Get(\u0026#34;javascript\u0026#34;) iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\u0026#34;github\u0026#34;) formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026amp;buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \u0026quot;bar\u0026quot;;   Ruby foo = \u0026quot;bar\u0026quot;{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026amp;B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026amp;B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or …","ref":"https://kgilmer.github.io/r13-dev-site/docs/tutorials/multi-bear/","title":"Multi-Bear Domicile Setup"},{"body":"Regolith, as a set of components, lacks a uniform configuration file, format, or set of conventions. However efforts have been made to create as much consistency as possible by utilizing a simple session-wide key-value configuration facility known as Xresources. Interface preferences such as colors and typeface are defined in Xresource files and then read by components such as st-term and i3-wm. For the most part, Xresources can be used for higher level changes. Lower level changes, for example swap out i3bar for polybar, or drun for Rofi, require more fundamental changes.\nIn addition to the content in this section, refer to the tutorials for step-by-step examples of how to customize Regolith.\n Look The highest level change in the way Regolith looks is called a \u0026ldquo;look\u0026rdquo;. This ties together color, typeface, GTK theme and icons into a packagable unit known as a look. A few looks ship in the Regolith PPA, the default for R1.3 being called Cahuella.\nStyles Regolith looks are a collection of style definitions that are bundled together as a cohesive whole. But, what if you want to mix and match from different looks or make small tweaks to an existing look? Well, the Xresource files that define the looks can be modified directly. For example, to continue to use the Cahuella look but change the default font from Source Code Pro to, say Ubuntu Mono, one would just need to modify the typeface Xresource file to specify the new font (assuming it's already installed on the system).\nCompositors A compositor is a desktop component that provides visual effects to windows. While not necessary for a desktop to function, they provide some hints to the user regarding the focused application, transitions, and other effects. The performance and behavior of compositors can vary depending on graphics hardware and driver configurations. Due to this, special attention was made such that they can be easily swapped based on the users needs.\nComponents A deeper level of customization is to change which components are loaded and used. This is an advanced topic and requires both some courage to deal with the unexpected as well as general technical knowledge and some patience.\nPackages Regolith is ultimately a set of Debian packages that exist as collections of files on the user's computer. Packages can be created and hosted by anyone willing and able to create a launchpad account and some skills with packaging. This section covers the details of Regolith's package structure and tips on creating your own.\n","excerpt":"Regolith, as a set of components, lacks a uniform configuration file, format, or set of conventions. …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/","title":"Customize"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90's four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven't heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026amp;B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026amp;B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There's a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a \u0026ldquo;mixed\u0026rdquo; task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin\u0026rsquo; Somethin\u0026rsquo;, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let's Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I'm a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026amp; Stealin, The New Style, She's Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \u0026quot;bar\u0026quot;; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \u0026quot;bar\u0026quot;; bar := \u0026quot;foo\u0026quot;; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \u0026#34;bar\u0026#34;;` lexer := lexers.Get(\u0026#34;javascript\u0026#34;) iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\u0026#34;github\u0026#34;) formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026amp;buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \u0026quot;bar\u0026quot;;   Ruby foo = \u0026quot;bar\u0026quot;{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026amp;B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026amp;B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or …","ref":"https://kgilmer.github.io/r13-dev-site/docs/tutorials/tutorial2/","title":"Another Tutorial"},{"body":"The following graph generated by debtree provides the dependency relationships of Regolith packages and some of their notable upstream dependencies:\nSource Packages Regolith's packages are hosted on PPAs provided by launchpad.net:\n   PPA Description Launchpad URL     ppa:regolith-linux/unstable Packages staged for developer testing. https://launchpad.net/~regolith-linux/+archive/ubuntu/unstable   ppa:regolith-linux/stable Packages that have been tested but have not been committed to a release. https://launchpad.net/~regolith-linux/+archive/ubuntu/stable   ppa:regolith-linux/release Packages as provided by the current Regolith release https://launchpad.net/~regolith-linux/+archive/ubuntu/release   ppa:kgilmer/speed-ricer General purpose packages that Regolith depends on that are not currently available via Ubuntu's repos. https://launchpad.net/~kgilmer/+archive/ubuntu/speed-ricer    Git Repositories The source code associated with Regolith packages is hosted on Regolith Linux's GitHub organization.\nInstaller ISOs The installer is produced using the Cubic tool and providing the target ISO files as manual uploads to the Regolith Linux GitHub org.\nBuild Regolith packages can be built, signed, and staged from the regolith-builder repository. See the project's README for details.\n","excerpt":"The following graph generated by debtree provides the dependency relationships of Regolith packages …","ref":"https://kgilmer.github.io/r13-dev-site/docs/customize/packages/","title":"Packages"},{"body":" This is a placeholder page that shows you how to use this template site.\n Tutorials are complete worked examples made up of multiple tasks that guide the user through a relatively simple but realistic scenario: building an application that uses some of your project’s features, for example. If you have already created some Examples for your project you can base Tutorials on them. This section is optional. However, remember that although you may not need this section at first, having tutorials can be useful to help your users engage with your example code, especially if there are aspects that need more explanation than you can easily provide in code comments.\n","excerpt":"This is a placeholder page that shows you how to use this template site.\n Tutorials are complete …","ref":"https://kgilmer.github.io/r13-dev-site/docs/tutorials/","title":"Tutorials"},{"body":" This is a placeholder page that shows you how to use this template site.\n If your project has an API, configuration, or other reference - anything that users need to look up that’s at an even lower level than a single task - put (or link to it) here. You can serve and link to generated reference docs created using Doxygen, Javadoc, or other doc generation tools by putting them in your static/ directory. Find out more in Adding static content. For OpenAPI reference, Docsy also provides a Swagger UI layout and shortcode that renders Swagger UI using any OpenAPI YAML or JSON file as source.\n","excerpt":"This is a placeholder page that shows you how to use this template site.\n If your project has an …","ref":"https://kgilmer.github.io/r13-dev-site/docs/reference/","title":"Reference"},{"body":"This site contains the information to use the Regolith desktop environment. The content is structured in an order inteded for new users, but feel free to skip around as you see fit. Feedback is always welcome and we appriciate any tips on how the documentation can be more complete, easy to read, and effective.\nTerminology Before diving in it's good to define some terms to avoid confusion.\n   Term Description     Keybinding A mapping between a set of key presses to a specific action performed by the desktop environment or application.   Desktop Environment A collection of software programs that used as a whole allow a user to interact with a computer using a keyboard, mouse, and monitor.   Bar A passive UI component typically placed at the top or bottom of the screen used to provide system information to the user.   Launcher An active UI component a user will invoke to perform an action, such as navigate to a window or launch a program.   Workspace A collection of windows all present together on the same computer monitor.   Window A program presents a graphical interface to users via windows. Some programs are text based and do not create windows of their own.   Window Manager A program that organizes windows on behalf of the user.   Tile Another word for a window used by tiling window managers.   Floating Window A window that does not share bounds with other windows in a workspace can be placed on top of them. This is the default layout for traditional window managers.    Table of Contents ","excerpt":"This site contains the information to use the Regolith desktop environment. The content is …","ref":"https://kgilmer.github.io/r13-dev-site/docs/","title":"Documentation"},{"body":" Get Regolith Regolith is available in two forms; as a stand-alone ISO that can be installed as a complete Linux operating system, and as a \"personal package archive\" (PPA) that installs the Regolith desktop into an existing Ubuntu desktop. Both installation methods result in the same Regolith experience. Both are offered for your convienence.\n      Regolith Linux ISO Installer Starting from scratch or simply want to try Regolith out in a VM or LiveUSB environment? Download the ISO and write it to a USB flash drive to install or test drive Regolith as an operating system. To learn how, visit the Ubuntu installer tutorial.\nDownload …\n   Regolith Desktop PPA Add the Regolith PPA to your existing Ubuntu system and install the regolith-desktop package with the following terminal commands:\n$ sudo add-apt-repository ppa:regolith-linux/release $ sudo apt install regolith-desktop After installation, Regolith will appear as a desktop session on the login screen. Learn more about adding PPAs here.    Upgrade from earlier version To upgrade your existing 1.1 or 1.2 version of Regolith to 1.3, simply move to the new PPA and perform a dist-upgrade:\n$ sudo add-apt-repository --remove ppa:kgilmer/regolith-stable $ sudo add-apt-repository ppa:regolith-linux/release $ sudo apt dist-upgrade  If you have made customizations to i3wm or your styles, it's recommended to use the defaults upon login and then manually integrate your changes back in. To ensure that the defaults are loaded, move your changes and then log back in.\n$ mv ~/.config/regolith ~/old-regolith-config $ mv ~/.Xresources-regolith ~/old-regolith-styles $ # now log back in     Remove Regolith Desktop If you decide Regolith isn't what you're looking for, restore your previous GNOME settings and completely remove Regolith by logging in to the standard Ubuntu session and executing the following commands from a terminal:$ sudo add-apt-repository \u0026ndash;remove ppa:regolith-linux/release $ sudo apt remove regolith-* $ sudo apt autoremove $ source ~/.regolith-gnome-backup $ rm -Rf ~/.regolith-gnome-backup ~/.config/regolith \n    ","excerpt":"Get Regolith Regolith is available in two forms; as a stand-alone ISO that can be installed as a …","ref":"https://kgilmer.github.io/r13-dev-site/download/","title":"Download"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/index.json","title":""},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/interact/","title":"Interact"},{"body":" These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files are stored in GitHub. You can use the guidelines \u0026ldquo;as is\u0026rdquo; or adapt them with your own instructions: for example, other deployment options, information about your doc project's file structure, project-specific review guidelines, versioning guidelines, or any other information your users might find useful when updating your site. Kubeflow has a great example.\nDon't forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here's a quick guide to updating the docs. It assumes you're familiar with the GitHub workflow and you're happy to use the automated preview of your doc updates:\n Fork the Regolith Linux repo on GitHub. Make your changes and send a pull request (PR). If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. (Don't add the Hugo property \u0026ldquo;draft = true\u0026rdquo; to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it's ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of \u0026ldquo;Deploy preview ready\u0026rdquo; to see a preview of your updates. Continue updating your doc and pushing your changes until you're happy with the content. When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers.  Updating a single page If you've just spotted something you'd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don't already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You'll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Regolith Linux repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you've found a problem in the docs, but you're not sure how to fix it yourself, please create an issue in the Regolith Linux repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  [Docsy user guide](wherever it goes): All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","excerpt":"These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files …","ref":"https://kgilmer.github.io/r13-dev-site/docs/policy-and-process/","title":"Policy and Process"},{"body":"  #td-cover-block-0 { background-image: url(/r13-dev-site/feature-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_1662351_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/r13-dev-site/feature-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_1662351_1920x1080_fill_q75_catmullrom_top.jpg); } }   Regolith is a modern desktop environment that saves you time by reducing the clutter and ceremony that stand between you and your work. Built on top of Ubuntu and GNOME, Regolith stands on a well-supported and consistent foundation.\n  Get Regolith   Documentation     \n         Upon login, Regolith is relatively free of clutter. A collapsible bar at the bottom provides important information such as the time and active workspace.\n       For those that work in the terminal, pressing super enter is all it takes to get to business.\n  Need more terminals? Toggle between horizontal and vertical layouts with super backspace.\n        Launching apps is as simple as super space, type a few letters of the app you're looking for and press enter to launch it:\n  Gnome Flashback provides consistent and simple system management. Tweak your UI, auto mount your USB drives, connect to wireless networks.\n        Toggle an overlay via super ? that presents the most important keybindings until they become muscle-memory.\n  Got a lot going on? Quickly find the window you're looking for via super ctrl space or navigate over workspaces with super [0 - 19].\n        Waste no space on frivolous UI and take advantage of every pixel without micro-managing your window layouts.\n        What Makes Regolith Different  Delivers a desktop with a functional yet minimal user interface that can be customized and expanded as needed. Provides GNOME's system management features with i3-wm's productive workflow. Enables new users a fast and fun way to try out a tiling window manager. Supports easy customization and ricing via a consistent Xresource configuration. Relies on Ubuntu's app store and package repositories for a large, high quality selection of software. Built to be taken apart. Swap in your own UI components easily. Ships with a toggle overlay of basic keybindings to make getting started easier. Provides a build script and package metadata to allow users to easily fork the desktop environment and distribution.      Credits Regolith is more curation than creation. Here are some of the notable people and entities that produced unaffiliated work independently from which Regolith is based.  Michael Stapelberg and Ingo Bürk Desktop UI  Dave Davenport Desktop UI  yshui Desktop UI  Alberts Muktupāvels Desktop UI  Jesús Castro and Alex Palaistras Desktop UI  Vivien Didelot Desktop UI  Arctic Ice Studio and Ethan Schoonover Colors  Alastair Reynolds Proper Nouns  Eliver Lara Theme  Sam Hewitt Icons  suckless.org Terminal  Psiu Puxa,Lucas Bellator, and Luca Bravo Artwork  PJ Singh Infrastructure  Canonical and GitHub Infrastructure         ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://kgilmer.github.io/r13-dev-site/","title":"Regolith Linux"},{"body":"","excerpt":"","ref":"https://kgilmer.github.io/r13-dev-site/search/","title":"Search Results"}]